{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1 align=\"center\">Integrating Local Music Library to Spotify Playlists</h1>\n",
    "<br>\n",
    "As of late May 2020, per <b>Spotify</b> documentation, <i>*it is not currently possible to add local files to playlists using the Web API...</i>\". The best alternative therefore is to use the Web API to query the available equivalent tracks of local files and add those to a new or existing playlist. When no equivalent is available, the user is prompted to add the local files to the playlist manually, or skip the missing tracks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Usage ###\n",
    "Tracks are fetched by supplying the source folder. The *artist* and *title* are queried from the ID tags (MP3 and FLAC audio files are supported). If no tags are available, the artist-track parsing is done at the the filename level by indicating the delimiter (*sep*). These information are used to perform a detailed search request to the Web API and the best-match track is retrieved. The tracks are scored using string-similarity &ndash; *Spotify's artists and title vs. local tag's artists and title* &ndash; and the user identifies the accept-fail score threshold. \n",
    "\n",
    "All information (including filename, artist tag, title tag, equivalent Spotify track, Spotify URI, similarity score, etc.) are stored in a Pandas dataframe. User is free to review, update, or delete entries before appending the tracks to a new or existing playlist."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example ###\n",
    "\n",
    "The details of the music files in the given path are populated in the *df* using **extract_local_files**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>filename</th>\n",
       "      <th>local_artist</th>\n",
       "      <th>local_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.324313e+09</td>\n",
       "      <td>The Shins - Caring Is Creepy.flac</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.332749e+09</td>\n",
       "      <td>The BPA feat. Emmy the Great - Seattle.flac</td>\n",
       "      <td>The BPA feat. Emmy the Great</td>\n",
       "      <td>Seattle</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.363290e+09</td>\n",
       "      <td>Pinback - Proceed to Memory.flac</td>\n",
       "      <td>Pinback</td>\n",
       "      <td>Proceed to Memory</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.368451e+09</td>\n",
       "      <td>RAC feat. Penguin Prison - Hollywood.mp3</td>\n",
       "      <td>RAC feat. Penguin Prison</td>\n",
       "      <td>Hollywood</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.382070e+09</td>\n",
       "      <td>Passion Pit - Constant Conversations.mp3</td>\n",
       "      <td>Passion Pit</td>\n",
       "      <td>Constant Conversations</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.387264e+09</td>\n",
       "      <td>TOKiMONSTA feat. MNDR - Go With It (CRNKN Remi...</td>\n",
       "      <td>TOKiMONSTA</td>\n",
       "      <td>Go With It feat. MNDR (CRNKN Remix)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.558166e+09</td>\n",
       "      <td>Vampire Weekend feat. Haim - This Life (Live V...</td>\n",
       "      <td>Vampire Weekend feat. Haim</td>\n",
       "      <td>This Life (Live Version)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.590975e+09</td>\n",
       "      <td>Sylvan Esso ft. Rostam - PARAD(wm)E [Rostam Re...</td>\n",
       "      <td>Sylvan Esso feat. Rostam</td>\n",
       "      <td>PARAD(w/m)E (Rostam Remix)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           time                                           filename  \\\n",
       "0  1.324313e+09                  The Shins - Caring Is Creepy.flac   \n",
       "1  1.332749e+09        The BPA feat. Emmy the Great - Seattle.flac   \n",
       "2  1.363290e+09                   Pinback - Proceed to Memory.flac   \n",
       "3  1.368451e+09           RAC feat. Penguin Prison - Hollywood.mp3   \n",
       "4  1.382070e+09           Passion Pit - Constant Conversations.mp3   \n",
       "5  1.387264e+09  TOKiMONSTA feat. MNDR - Go With It (CRNKN Remi...   \n",
       "6  1.558166e+09  Vampire Weekend feat. Haim - This Life (Live V...   \n",
       "7  1.590975e+09  Sylvan Esso ft. Rostam - PARAD(wm)E [Rostam Re...   \n",
       "\n",
       "                   local_artist                          local_title  \n",
       "0                     The Shins                     Caring Is Creepy  \n",
       "1  The BPA feat. Emmy the Great                              Seattle  \n",
       "2                       Pinback                    Proceed to Memory  \n",
       "3      RAC feat. Penguin Prison                            Hollywood  \n",
       "4                   Passion Pit               Constant Conversations  \n",
       "5                    TOKiMONSTA  Go With It feat. MNDR (CRNKN Remix)  \n",
       "6    Vampire Weekend feat. Haim             This Life (Live Version)  \n",
       "7      Sylvan Esso feat. Rostam           PARAD(w/m)E (Rostam Remix)  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = extract_local_files(path, \" - \", False, \"MP3\", \"flac\")\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **scrape_spotify** function updates the *df* by adding the details of the closest available Spotify equivalent for each track. The details include the *artists*, *title*, the track *URI*, and the *score* of how similar the best match track is to the local file. This similarity is based on the artist and title from the IDv3 tag or from the filename.\n",
    "\n",
    "The Emmy the Great track did not fetch results and have a score of 0, while the Pinback track perfectly matched the details of the local file and thus had a score of 1.0. In this case, the missing track happened to be unavailable in the immediate market of the user (US)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No matches for The BPA feat. Emmy the Great - Seattle.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>filename</th>\n",
       "      <th>local_artist</th>\n",
       "      <th>local_title</th>\n",
       "      <th>artists</th>\n",
       "      <th>title</th>\n",
       "      <th>uri</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.324313e+09</td>\n",
       "      <td>The Shins - Caring Is Creepy.flac</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "      <td>spotify:track:2AZmlhK1ssultfpYk3EIEH</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.332749e+09</td>\n",
       "      <td>The BPA feat. Emmy the Great - Seattle.flac</td>\n",
       "      <td>The BPA feat. Emmy the Great</td>\n",
       "      <td>Seattle</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.363290e+09</td>\n",
       "      <td>Pinback - Proceed to Memory.flac</td>\n",
       "      <td>Pinback</td>\n",
       "      <td>Proceed to Memory</td>\n",
       "      <td>Pinback</td>\n",
       "      <td>Proceed to Memory</td>\n",
       "      <td>spotify:track:0W0y4CzLCy4y7pIBOoZ2ZC</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.368451e+09</td>\n",
       "      <td>RAC feat. Penguin Prison - Hollywood.mp3</td>\n",
       "      <td>RAC feat. Penguin Prison</td>\n",
       "      <td>Hollywood</td>\n",
       "      <td>RAC Penguin Prison</td>\n",
       "      <td>Hollywood</td>\n",
       "      <td>spotify:track:3xEqegrcyQtfhWeEMnDyCG</td>\n",
       "      <td>0.923008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.382070e+09</td>\n",
       "      <td>Passion Pit - Constant Conversations.mp3</td>\n",
       "      <td>Passion Pit</td>\n",
       "      <td>Constant Conversations</td>\n",
       "      <td>Passion Pit</td>\n",
       "      <td>Constant Conversations</td>\n",
       "      <td>spotify:track:3p9x4bK5bwmgXE6POMvOp0</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.387264e+09</td>\n",
       "      <td>TOKiMONSTA feat. MNDR - Go With It (CRNKN Remi...</td>\n",
       "      <td>TOKiMONSTA</td>\n",
       "      <td>Go With It feat. MNDR (CRNKN Remix)</td>\n",
       "      <td>TOKiMONSTA MNDR</td>\n",
       "      <td>Go With It</td>\n",
       "      <td>spotify:track:5dFhRQKsHnAiyg9wXKtJDz</td>\n",
       "      <td>0.855111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.558166e+09</td>\n",
       "      <td>Vampire Weekend feat. Haim - This Life (Live V...</td>\n",
       "      <td>Vampire Weekend feat. Haim</td>\n",
       "      <td>This Life (Live Version)</td>\n",
       "      <td>Vampire Weekend</td>\n",
       "      <td>This Life</td>\n",
       "      <td>spotify:track:4dRqYKhLVujxiBXcq50YzG</td>\n",
       "      <td>0.862667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.590975e+09</td>\n",
       "      <td>Sylvan Esso ft. Rostam - PARAD(wm)E [Rostam Re...</td>\n",
       "      <td>Sylvan Esso feat. Rostam</td>\n",
       "      <td>PARAD(w/m)E (Rostam Remix)</td>\n",
       "      <td>Sylvan Esso Rostam</td>\n",
       "      <td>PARAD(w/m)E - Rostam Remix</td>\n",
       "      <td>spotify:track:2gG1x8gdCy3spQMJh05tic</td>\n",
       "      <td>0.902338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           time                                           filename  \\\n",
       "0  1.324313e+09                  The Shins - Caring Is Creepy.flac   \n",
       "1  1.332749e+09        The BPA feat. Emmy the Great - Seattle.flac   \n",
       "2  1.363290e+09                   Pinback - Proceed to Memory.flac   \n",
       "3  1.368451e+09           RAC feat. Penguin Prison - Hollywood.mp3   \n",
       "4  1.382070e+09           Passion Pit - Constant Conversations.mp3   \n",
       "5  1.387264e+09  TOKiMONSTA feat. MNDR - Go With It (CRNKN Remi...   \n",
       "6  1.558166e+09  Vampire Weekend feat. Haim - This Life (Live V...   \n",
       "7  1.590975e+09  Sylvan Esso ft. Rostam - PARAD(wm)E [Rostam Re...   \n",
       "\n",
       "                   local_artist                          local_title  \\\n",
       "0                     The Shins                     Caring Is Creepy   \n",
       "1  The BPA feat. Emmy the Great                              Seattle   \n",
       "2                       Pinback                    Proceed to Memory   \n",
       "3      RAC feat. Penguin Prison                            Hollywood   \n",
       "4                   Passion Pit               Constant Conversations   \n",
       "5                    TOKiMONSTA  Go With It feat. MNDR (CRNKN Remix)   \n",
       "6    Vampire Weekend feat. Haim             This Life (Live Version)   \n",
       "7      Sylvan Esso feat. Rostam           PARAD(w/m)E (Rostam Remix)   \n",
       "\n",
       "              artists                       title  \\\n",
       "0           The Shins            Caring Is Creepy   \n",
       "1                                                   \n",
       "2             Pinback           Proceed to Memory   \n",
       "3  RAC Penguin Prison                   Hollywood   \n",
       "4         Passion Pit      Constant Conversations   \n",
       "5     TOKiMONSTA MNDR                  Go With It   \n",
       "6     Vampire Weekend                   This Life   \n",
       "7  Sylvan Esso Rostam  PARAD(w/m)E - Rostam Remix   \n",
       "\n",
       "                                    uri     score  \n",
       "0  spotify:track:2AZmlhK1ssultfpYk3EIEH  1.000000  \n",
       "1                                        0.000000  \n",
       "2  spotify:track:0W0y4CzLCy4y7pIBOoZ2ZC  1.000000  \n",
       "3  spotify:track:3xEqegrcyQtfhWeEMnDyCG  0.923008  \n",
       "4  spotify:track:3p9x4bK5bwmgXE6POMvOp0  1.000000  \n",
       "5  spotify:track:5dFhRQKsHnAiyg9wXKtJDz  0.855111  \n",
       "6  spotify:track:4dRqYKhLVujxiBXcq50YzG  0.862667  \n",
       "7  spotify:track:2gG1x8gdCy3spQMJh05tic  0.902338  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = scrape_spotify(df)\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **add_to_playlist** function adds each track on the *df* to the selected user playlist. Only tracks that have a *score* that is equal or greater than the threshold are added.\n",
    "\n",
    "When a track is not available &ndash; i.e. the *artists* and *title* are empty &ndash; the user is prompted to either add the track to the playlist manually or to skip it by hitting Return. Spotify allows local tracks to be integrated to the user's song library and even allow them __[to be downloaded onto mobile devices](https://support.spotify.com/us/using_spotify/features/listen-to-local-files/)__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter index of playlist:\n",
      "0 - Trance + House\n",
      "1 - Alternative Folk\n",
      "2 - Odd Guilty Pleasures \n",
      "3 - 2010's Indie\n",
      "4 - All Things Pop\n",
      "5 - SEA Rising\n",
      "6 - Life in Podcasts\n",
      "\n",
      "3\n",
      "\n",
      "Please add The BPA feat. Emmy the Great - Seattle manually then hit Return key to proceed.\n"
     ]
    }
   ],
   "source": [
    "add_to_playlist(df, threshold=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, the user may also create a new playlist for the *df* tracks using **generate_playlist**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "generate_playlist(df, \"My Local Files\", threshold=0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### API Reference ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**strip_extension**(*file*)<br>\n",
    "Removes the file extension of a given filename string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Portugal. The Man - Atomic Man'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strip_extension(\"Portugal. The Man - Atomic Man.mp3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**has_ID**(*file*)<br>\n",
    "Checks if file has IDv3 tag. Currently only supports *.mp3* and *.flac* files. Returns *True* or *False*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "has_ID(r\"Music\\Portugal. The Man - Atomic Man.mp3\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_artist**(*path*, *track*, *sep*, *skiptag*)<br>\n",
    "If *skiptag* is *True*, retrieves artist from the filename given that it follows the format: *artist sep title*. Otherwise, retrieves artist from the IDv3 tag."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portugal. The Man\n"
     ]
    }
   ],
   "source": [
    "get_artist(r\"Music\", \"Portugal. The Man - Atomic Man.mp3\", \" - \", False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_title**(*path*, *track*, *sep*, *skiptag*)<br>\n",
    "If *skiptag* is *True*, retrieves title from the filename given that it follows the format: *artist sep title*. Otherwise, retrieves title from the IDv3 tag."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Atomic Man\n"
     ]
    }
   ],
   "source": [
    "get_title(r\"Music\", \"Portugal. The Man - Atomic Man.mp3\", \" - \", False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_keywords**(*query*, *type*=\"artist\")<br>\n",
    "If *type* is *artist*, each artist &ndash; delimited by *comma*, *ampersand*, *feat.*, or *ft.* &ndash; in the *query* string is tokenized in the returned list. If *type* is *title*, each word in the *query* string is tokenized in the returned list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['peter bjorn  john victoria bergsman', 'peter', 'bjorn', 'john', 'victoria bergsman']\n"
     ]
    }
   ],
   "source": [
    "get_keywords(\"Peter, Bjorn & John feat. Victoria Bergsman\", type=\"artist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['young folks (acoustic version)', 'young', 'folks', 'acoustic', 'version']\n"
     ]
    }
   ],
   "source": [
    "get_keywords(\"Young Folks (Acoustic Version)\", type=\"title\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_keys**(*artist*, *title*)<br>\n",
    "Generates tuple of search terms for *artist* and *title*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['portugal. the man', 'portugal. the man'], ['atomic', 'man', 'atomic man'])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_keys(\"Portugal. The Man\", \"Atomic Man\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_q**(*artist_keys*, *title_keys*)<br>\n",
    "Retrieves the query results of a detailed Spotify search with *artist* and *track* labels given the *artist_keys* and *title_keys* keywords.\n",
    "\n",
    "In the case below, it is submitting a query as such: `q=artist:strfkr%20track:jupiter&type=track`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'album': {'album_type': 'album',\n",
      "   'artists': [{'external_urls': {'spotify': 'https://open.spotify.com/artist/2Tz1DTzVJ5Gyh8ZwVr6ekU'},\n",
      "     'href': 'https://api.spotify.com/v1/artists/2Tz1DTzVJ5Gyh8ZwVr6ekU',\n",
      "     'id': '2Tz1DTzVJ5Gyh8ZwVr6ekU',...\n"
     ]
    }
   ],
   "source": [
    "get_q([\"strfkr\"], [\"jupiter\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_q_simple**(*artist_keys*, *title_keys*)<br>\n",
    "Retrieves the query results of a simple Spotify search (i.e. without specifying which tokens are for *artist* nor which tokens are for *track*) given the *artist_keys* and *title_keys* as tagless keywords.\n",
    "\n",
    "In the case below, it is submitting a query as such: `q=strfkr%20jupiter&type=track`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'album': {'album_type': 'album',\n",
      "   'artists': [{'external_urls': {'spotify': 'https://open.spotify.com/artist/2Tz1DTzVJ5Gyh8ZwVr6ekU'},\n",
      "     'href': 'https://api.spotify.com/v1/artists/2Tz1DTzVJ5Gyh8ZwVr6ekU',\n",
      "     'id': '2Tz1DTzVJ5Gyh8ZwVr6ekU',...\n"
     ]
    }
   ],
   "source": [
    "get_q_simple([\"strfkr\"], [\"jupiter\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_string_similarity**(*string1*, *string2*)<br>\n",
    "Uses Jaro-Winkler to calculate similarity score of two strings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.89566\n"
     ]
    }
   ],
   "source": [
    "get_string_similarity(\"Iron & Wine\", \"Iron and Wine\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**get_best_match**(*artist*, *title*)<br>\n",
    "Retrieves Spotify track *artist*, *title*, *URI*, and similarity *score* of closest match to given *artist* and *title* strings. Returns dictionary if an output is produced. Otherwise, returns dictionary with empty keys.\n",
    "\n",
    "First performs detailed search using every tokenized title permutation &ndash; the *artist* along with, iteratively: `lessons in love`, `lessons`, `in`, `love`. Selects the closest match (i.e. best score) among the results.\n",
    "\n",
    "If query returns nothing, performs detailed search using every artist permutation &ndash; the *title* along with, iteratively: `kaskade neon trees`, `kaskade`, `neon trees`. Selects the closest match (i.e. best score) among the results.\n",
    "\n",
    "If nothing still, performs tagless search using every artist and title keywords &ndash; `kaskade neon trees lessons in love`. Selects the closest match (i.e. best score) among the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'artist': 'Kaskade Neon Trees',\n",
       " 'title': 'Lessons In Love',\n",
       " 'uri': 'spotify:track:3fPPBbpHUpUnZOU9QwBiWp',\n",
       " 'score': 0.8965034965034965}"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_best_match(\"Kaskade feat. Neon Trees\", \"Lessons in Love\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**extract_local_files**(*path*, *sep*=\" - \", *skiptag*=False, &ast;*filetypes*)<br>\n",
    "Gets information of the files of given *filetypes* in the specified *path*. If *skiptag* is *True*, retrieves information from the filename as delimited by *sep* given that it follows the format: *artist sep title*. Otherwise, retrieves information from the IDv3 tag. Returns dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>filename</th>\n",
       "      <th>local_artist</th>\n",
       "      <th>local_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.324313e+09</td>\n",
       "      <td>The Shins - Caring Is Creepy.flac</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           time                           filename local_artist  \\\n",
       "0  1.324313e+09  The Shins - Caring Is Creepy.flac    The Shins   \n",
       "\n",
       "        local_title  \n",
       "0  Caring Is Creepy  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "extract_local_files(path, \" - \", False, \"MP3\", \"flac\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**scrape_spotify**(*df*)<br>\n",
    "Updates *df* with the Spotify track *artist*, *title*, *URI*, and similarity *score* of closest match to each dataframe entry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>filename</th>\n",
       "      <th>local_artist</th>\n",
       "      <th>local_title</th>\n",
       "      <th>artists</th>\n",
       "      <th>title</th>\n",
       "      <th>uri</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.324313e+09</td>\n",
       "      <td>The Shins - Caring Is Creepy.flac</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "      <td>The Shins</td>\n",
       "      <td>Caring Is Creepy</td>\n",
       "      <td>spotify:track:2AZmlhK1ssultfpYk3EIEH</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           time                           filename local_artist  \\\n",
       "0  1.324313e+09  The Shins - Caring Is Creepy.flac    The Shins   \n",
       "\n",
       "        local_title    artists             title  \\\n",
       "0  Caring Is Creepy  The Shins  Caring Is Creepy   \n",
       "\n",
       "                                    uri  score  \n",
       "0  spotify:track:2AZmlhK1ssultfpYk3EIEH    1.0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scrape_spotify(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**add_tracks**(*df*, *playlist_uri*, *threshold*)<br>\n",
    "Adds tracks from *df* that have a score equal or greater than the *threshold* to the *playlist_uri* user playlist."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "add_tracks(df, \"spotify:playlist:iIfR7l...\", 0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**add_to_playlist**(*df*, *threshold*=0.5)<br>\n",
    "Adds tracks from *df* that have a score equal or greater than the *threshold* to the user playlist selected after the prompt."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter index of playlist:\n",
      "0 - Best of 2010's\n",
      "1 - Best of 2000's\n",
      "2 - Classic Stuff\n"
     ]
    }
   ],
   "source": [
    "add_to_playlist(df, threshold=0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**generate_playlist**(*df*, *playlist_name*, *threshold*=0.5)<br>\n",
    "Adds tracks from *df* that have a score equal or greater than the *threshold* to a new user playlist entitled *playlist_name*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "generate_playlist(df, \"Pre-Spotify Music\", threshold=0.6)"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
